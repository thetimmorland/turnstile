{"version":3,"sources":["app/Navbar.tsx","features/proofs/proofsSlice.ts","features/proofs/ProofEditor.tsx","features/proofs/ProofList.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","theme","title","flexGrow","link","textDecoration","color","Navbar","children","styles","AppBar","position","Toolbar","Typography","variant","className","to","proofsSlice","createSlice","name","initialState","reducers","addProof","reducer","state","action","push","payload","prepare","id","nanoid","actions","ProofEditor","proofId","useParams","proof","useSelector","proofs","find","selectProof","fab","bottom","spacing","right","extendedIcon","marginRight","ProofList","renderedProofs","map","Fab","component","Link","App","CssBaseline","exact","path","store","configureStore","proofReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qMAKMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,MAAO,CACLC,SAAU,GAEZC,KAAM,CACJC,eAAgB,OAChBC,MAAO,YAyBIC,EAjBA,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,SACVC,EAASV,IAEf,OACE,cAACW,EAAA,EAAD,CAAQC,SAAS,SAAjB,SACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAWN,EAAOP,MAA3C,SACE,cAAC,IAAD,CAAMc,GAAG,IAAID,UAAWN,EAAOL,KAA/B,yBAIDI,Q,QCvBIS,EAAcC,YAAY,CACrCC,KAAM,SACNC,aAAc,GACdC,SAAU,CACRC,SAAU,CACRC,QAAS,SAACC,EAAOC,GACfD,EAAME,KAAKD,EAAOE,UAEpBC,QAAS,WAEP,MAAO,CAAED,QAAS,CAAEE,GADTC,qBAYJb,GALaA,EAAYc,QAAzBT,SAKAL,EAAf,S,eCNee,EAZK,WAAO,IACjBC,EAAYC,cAAZD,QACFE,EAAQC,YDaW,SAACH,GAAD,OAAqB,SAACT,GAAD,OAC9CA,EAAMa,OAAOC,MAAK,SAACH,GAAD,OAAWA,EAAMN,KAAOI,MCdhBM,CAAYN,IAEtC,OACE,gCACE,cAAC,EAAD,IACCE,EAAQ,wDAAmC,0D,yBCR5CpC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCuC,IAAK,CACH7B,SAAU,WACV8B,OAAQxC,EAAMyC,QAAQ,GACtBC,MAAO1C,EAAMyC,QAAQ,IAEvBE,aAAc,CACZC,YAAa5C,EAAMyC,QAAQ,QA2BhBI,EAvBG,WAChB,IAAMrC,EAASV,IAETgD,EADSX,aAAY,SAACZ,GAAD,OAAsBA,EAAMa,UACzBW,KAAI,SAACb,GAAD,OAAW,4CAE7C,OACE,gCACE,cAAC,EAAD,IACCY,EACD,eAACE,EAAA,EAAD,CACEC,UAAWC,IACXnC,GAAG,aACHF,QAAQ,WACRR,MAAM,YACNS,UAAWN,EAAO+B,IALpB,UAOE,cAAC,IAAD,CAASzB,UAAWN,EAAOmC,eAP7B,mBCCSQ,MAnBf,WACE,OACE,qCACE,cAACC,EAAA,EAAD,IACA,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAlB,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,kBAAlB,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAUvC,GAAG,eCNRwC,EAdDC,YAAe,CAC3BlC,QAAS,CACPc,OAAQqB,K,iBCOQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUV,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJW,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a6629de0.chunk.js","sourcesContent":["import { AppBar, Toolbar, Typography } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    flexGrow: 1,\n  },\n  link: {\n    textDecoration: \"none\",\n    color: \"#FFF\",\n  },\n}));\n\ninterface Props {\n  children?: React.ReactNode;\n}\n\nconst Navbar = ({ children }: Props) => {\n  const styles = useStyles();\n\n  return (\n    <AppBar position=\"static\">\n      <Toolbar>\n        <Typography variant=\"h6\" className={styles.title}>\n          <Link to=\"/\" className={styles.link}>\n            Turnstile\n          </Link>\n        </Typography>\n        {children}\n      </Toolbar>\n    </AppBar>\n  );\n};\n\nexport default Navbar;\n","import { createSlice, nanoid, PayloadAction } from \"@reduxjs/toolkit\";\nimport { RootState } from \"app/store\";\n\ninterface Proof {\n  id: string;\n}\n\nexport const proofsSlice = createSlice({\n  name: \"proofs\",\n  initialState: [] as Proof[],\n  reducers: {\n    addProof: {\n      reducer: (state, action: PayloadAction<Proof>) => {\n        state.push(action.payload);\n      },\n      prepare: () => {\n        const id = nanoid();\n        return { payload: { id } };\n      },\n    },\n  },\n});\n\nexport const { addProof } = proofsSlice.actions;\n\nexport const selectProof = (proofId: string) => (state: RootState) =>\n  state.proofs.find((proof) => proof.id === proofId);\n\nexport default proofsSlice.reducer;\n","import NavBar from \"app/Navbar\";\nimport { selectProof } from \"features/proofs/proofsSlice\";\nimport React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useParams } from \"react-router-dom\";\n\ninterface MatchParams {\n  proofId: string;\n}\n\nconst ProofEditor = () => {\n  const { proofId } = useParams<MatchParams>();\n  const proof = useSelector(selectProof(proofId));\n\n  return (\n    <div>\n      <NavBar />\n      {proof ? <div>json.stringify(proof)</div> : <h2>Could not find proof</h2>}\n    </div>\n  );\n};\n\nexport default ProofEditor;\n","import { Fab } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport Navbar from \"app/Navbar\";\nimport { RootState } from \"app/store\";\nimport React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\n\nconst useStyles = makeStyles((theme) => ({\n  fab: {\n    position: \"absolute\",\n    bottom: theme.spacing(2),\n    right: theme.spacing(2),\n  },\n  extendedIcon: {\n    marginRight: theme.spacing(1),\n  },\n}));\n\nconst ProofList = () => {\n  const styles = useStyles();\n  const proofs = useSelector((state: RootState) => state.proofs);\n  const renderedProofs = proofs.map((proof) => <p>proof.id</p>);\n\n  return (\n    <div>\n      <Navbar />\n      {renderedProofs}\n      <Fab\n        component={Link}\n        to=\"/proof/foo\"\n        variant=\"extended\"\n        color=\"secondary\"\n        className={styles.fab}\n      >\n        <AddIcon className={styles.extendedIcon} />\n        New Proof\n      </Fab>\n    </div>\n  );\n};\n\nexport default ProofList;\n","import CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport ProofEditor from \"features/proofs/ProofEditor\";\r\nimport ProofList from \"features/proofs/ProofList\";\r\nimport React from \"react\";\r\nimport {\r\n  HashRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Redirect,\r\n} from \"react-router-dom\";\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <CssBaseline />\r\n      <Router>\r\n        <Switch>\r\n          <Route exact path=\"/\">\r\n            <ProofList />\r\n          </Route>\r\n          <Route exact path=\"/proof/:proofId\">\r\n            <ProofEditor />\r\n          </Route>\r\n          <Redirect to=\"/\" />\r\n        </Switch>\r\n      </Router>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore, ThunkAction, Action } from \"@reduxjs/toolkit\";\r\nimport proofReducer from \"features/proofs/proofsSlice\";\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    proofs: proofReducer,\r\n  },\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n\r\nexport default store;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { \"Service-Worker\": \"script\" },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import App from \"App\";\r\nimport store from \"app/store\";\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport * as serviceWorker from \"serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}