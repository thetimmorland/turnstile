{"version":3,"sources":["store/index.ts","store/localStorage.ts","components/App.tsx","store/actions.ts","serviceWorker.ts","index.tsx"],"names":["initialState","proofs","sequent","premises","kind","value","rhs","lhs","conclusions","store","createStore","state","action","undefined","reducer","payload","serializedState","localStorage","getItem","JSON","parse","err","loadState","subscribe","stringify","setItem","console","error","saveState","getState","useStyles","makeStyles","theme","createStyles","title","flexGrow","button","margin","spacing","spacer","mixins","toolbar","classes","useSelector","dispatch","useDispatch","AppBar","position","Toolbar","Typography","variant","className","Button","onClick","type","clearProofs","Box","p","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","onUpdate","onSuccess","catch","ReactDOM","render","App","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.2d275553.chunk.js","sourcesContent":["import { createStore } from \"redux\";\nimport { loadState, saveState } from \"./localStorage\";\n\ntype Actions = typeof import(\"./actions\");\nexport type AppAction = {\n  [Name in keyof Actions]: Actions[Name] extends (...args: any[]) => any\n    ? ReturnType<Actions[Name]>\n    : never;\n}[keyof Actions];\n\nconst initialState: AppState = {\n  proofs: [\n    {\n      sequent: {\n        premises: [\n          {\n            kind: \"atom\",\n            value: \"p\",\n          },\n          {\n            kind: \"implies\",\n            rhs: {\n              kind: \"atom\",\n              value: \"p\",\n            },\n            lhs: {\n              kind: \"atom\",\n              value: \"q\",\n            },\n          },\n        ],\n        conclusions: [\n          {\n            kind: \"atom\",\n            value: \"q\",\n          },\n        ],\n      },\n    },\n  ],\n};\n\nconst reducer = (state = initialState, action: AppAction): AppState => {\n  if (state === undefined) {\n    return initialState;\n  } else {\n    return action.reducer ? action.reducer(state, action.payload) : state;\n  }\n};\n\nconst store = createStore(reducer, loadState());\n\nstore.subscribe(() => {\n  saveState(store.getState());\n});\n\nexport default store;\n","export const loadState = (): AppState | undefined => {\n  try {\n    const serializedState = localStorage.getItem(\"state\");\n    if (serializedState === null) {\n      return undefined;\n    }\n    return JSON.parse(serializedState);\n  } catch (err) {\n    return undefined;\n  }\n};\n\nexport const saveState = (state: AppState) => {\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem(\"state\", serializedState);\n  } catch (err) {\n    console.error(\"could not save state to local storage\");\n  }\n};\n","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport { AppBar, Toolbar, Typography, Button, Box } from \"@material-ui/core\";\n\nimport { clearProofs } from \"../store/actions\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    title: {\n      flexGrow: 1,\n    },\n    button: {\n      margin: theme.spacing(1),\n    },\n    spacer: theme.mixins.toolbar,\n  })\n);\n\nexport default () => {\n  const classes = useStyles();\n\n  const state = useSelector((state: AppState) => state);\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <AppBar position=\"absolute\">\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.title}>\n            Turnstile\n          </Typography>\n          <Button\n            className={classes.button}\n            variant=\"contained\"\n            onClick={() => dispatch(clearProofs())}\n          >\n            Menu\n          </Button>\n        </Toolbar>\n      </AppBar>\n      <div className={classes.spacer} />\n      <Box p={2}>{JSON.stringify(state)}</Box>\n    </>\n  );\n};\n","export const clearProofs = () => {\n  const payload = {};\n  return {\n    type: \"CLEAR_PROOFS\",\n    payload,\n    reducer: (state: AppState, p = payload): AppState => {\n      return { ...state, proofs: [] };\n    },\n  };\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\n\nimport store from \"./store\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}